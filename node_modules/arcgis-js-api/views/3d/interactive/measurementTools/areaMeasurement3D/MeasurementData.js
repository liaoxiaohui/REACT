// COPYRIGHT Â© 2018 Esri
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// This material is licensed for use under the Esri Master License
// Agreement (MLA), and is bound by the terms of that agreement.
// You may redistribute and use this code without modification,
// provided you adhere to the terms of the MLA and include this
// copyright notice.
//
// See use restrictions at http://www.esri.com/legal/pdfs/mla_e204_e300/english
//
// For additional information, contact:
// Environmental Systems Research Institute, Inc.
// Attn: Contracts and Legal Services Department
// 380 New York Street
// Redlands, California, USA 92373
// USA
//
// email: contracts@esri.com
//
// See http://js.arcgis.com/4.8/esri/copyright.txt for details.

define(["require","exports","../../../../../core/libs/earcut/earcut","../../../../../geometry/SpatialReference","../../../../../geometry/support/intersects","../support/measurementUtils","../support/Quantity","../support/viewUtils","../../../lib/glMatrix","../../../support/earthUtils","../../../support/mathUtils","../../../support/mathUtils","../../../support/projectionUtils","../../../support/RenderCoordsHelper"],function(e,t,i,s,r,o,n,h,a,d,c,p,l,g){function m(e,t,i){for(var s=new Float64Array(e.length*i),r=0;r<e.length;++r)for(var o=e[r],n=0;n<i;++n)s[r*i+n]=o[n];return s}return function(){function e(){this.positionsWorldCoords=[],this.positionsRenderCoords=[],this.positionsProjectedWorldCoords=[],this.positionsFittedRenderCoords=[],this.positionsGeographic=[],this.positionsSpherical=[],this.positionsStereographic=[],this.pathSegmentLengths=[],this.geodesicPathSegmentLengths=[],this.perimeterSegmentLengths=[],this.intersectingSegments=new Set,this.geodesicIntersectingSegments=new Set,this.areaCentroidWorldCoords=a.vec3d.create(),this.areaCentroidRenderCoords=a.vec3d.create(),this.areaNormalRenderCoords=a.vec3d.create(),this.geodesicAreaCentroidRenderCoords=a.vec3d.create(),this.geodesicAreaNormalRenderCoords=a.vec3d.create(),this._length=0,this._centroidRenderCoords=a.vec3d.create(),this._planeWorldCoords=a.vec4d.create(),this._worldUp=a.vec3d.create(),this._worldTangent=a.vec3d.create(),this._frame=[a.vec3d.create(),a.vec3d.create(),a.vec3d.create()],this._tempU=a.vec3d.create(),this._tempV=a.vec3d.create(),this._tempVec3=a.vec3d.create(),this._tempSphere={center:a.vec3d.create(),radius:0}}return e.prototype.update=function(e,t,i,r,o,h,d,c){t.clear(),this._resize(e.length);for(var p=i.spatialReference.isWGS84||i.spatialReference.isWebMercator,g=this.positionsGeographic,m=this.positionsWorldCoords,u=this.positionsRenderCoords,_=this.positionsSpherical,v=0;v<e.length;++v){var f=e.vertex(v);l.pointToVector(f,m[v],d),l.pointToVector(f,u[v],h),p&&(l.pointToVector(f,g[v],s.WGS84),l.pointToVector(f,_[v],l.SphericalECEFSpatialReference),a.vec3d.normalize(_[v],_[v]))}var C=this._updatePathLengths(o);if(this.pathLength=this._length>0?new n(r.normalizeDistance(C),"meters"):null,p){var S=this._updateGeodesicPathLengths(o);this.geodesicPathLength=this._length>0?new n(S,"meters"):null}else this.geodesicPathLength=null;if(!o)return this.area=null,this.geodesicArea=null,this.perimeterLength=null,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.intersectingSegments.clear(),void this.geodesicIntersectingSegments.clear();this._updateArea(i,r,h,d,c),p&&this._updateGeodesicArea(i,h)},e.prototype._resize=function(e){for(e<this._length&&(this.positionsWorldCoords.length=e,this.positionsRenderCoords.length=e,this.positionsProjectedWorldCoords.length=e,this.positionsFittedRenderCoords.length=e,this.positionsGeographic.length=e,this.positionsSpherical.length=e,this.positionsStereographic.length=e,this.pathSegmentLengths.length=e,this.geodesicPathSegmentLengths.length=e,this.perimeterSegmentLengths.length=e,this._length=e);this._length<e;)this.positionsWorldCoords.push(a.vec3d.create()),this.positionsRenderCoords.push(a.vec3d.create()),this.positionsProjectedWorldCoords.push(a.vec2d.create()),this.positionsFittedRenderCoords.push(a.vec3d.create()),this.positionsGeographic.push(a.vec3d.create()),this.positionsSpherical.push(a.vec3d.create()),this.positionsStereographic.push(a.vec2d.create()),this.pathSegmentLengths.push(0),this.geodesicPathSegmentLengths.push(0),this.perimeterSegmentLengths.push(0),++this._length},e.prototype._updatePathLengths=function(e){for(var t=this.positionsWorldCoords,i=this.pathSegmentLengths,s=0,r=0;r<this._length;++r){var o=i[r]=a.vec3d.dist(t[r],t[(r+1)%this._length]);(r<this._length-1||e)&&(s+=o)}return s},e.prototype._updateGeodesicPathLengths=function(e){for(var t=this.positionsGeographic,i=this.geodesicPathSegmentLengths,s=0,r=0;r<this._length;++r){var n=i[r]=o.segmentLengthGeodesicVector(t[r],t[(r+1)%this._length]);(r<this._length-1||e)&&(s+=n)}return s},e.prototype._updateArea=function(e,t,i,s,r){var d=e.renderCoordsHelper,c=this.positionsWorldCoords,m=this.positionsRenderCoords,u=this.positionsProjectedWorldCoords,_=this.positionsFittedRenderCoords,v=this._planeWorldCoords,f=this._centroidRenderCoords;h.midpoint(m,f),d.worldUpAtPosition(f,this._worldUp),d.worldBasisAtPosition(f,g.BasisDimension.X,this._worldTangent),l.transformDirection(f,this._worldUp,i,this._worldUp,s),l.transformDirection(f,this._worldTangent,i,this._worldTangent,s),o.bestFitPlane(c,v),this.fittingMode=this._selectFittingMode(v,c,this._worldUp,r);var C=0;if("horizontal"===this.fittingMode){var S=-1/0;m.forEach(function(e,t){var i=d.getAltitude(m[t]);i>S&&(S=i,C=t)})}var R=c[C],A=v,w=this._worldTangent;"horizontal"===this.fittingMode?A=this._worldUp:"vertical"===this.fittingMode&&(A=this._tempVec3,w=this._worldUp,p.makeOrthonormal(v,this._worldUp,A)),a.vec3d.set(A,this._frame[2]),p.makeOrthonormal(w,A,this._frame[0]),a.vec3d.cross(this._frame[0],this._frame[2],this._frame[1]),a.vec3d.negate(this._frame[1]);for(var L=this._tempVec3,P=this._tempU,W=this._tempV,U=0;U<this._length;++U){var G=u[U],y=_[U];a.vec3d.subtract(c[U],R,L),a.vec2d.set2(a.vec3d.dot(this._frame[0],L),a.vec3d.dot(this._frame[1],L),G),a.vec3d.scale(this._frame[0],G[0],P),a.vec3d.scale(this._frame[1],G[1],W),a.vec3d.add(P,W,L),a.vec3d.add(L,R),l.vectorToVector(L,s,y,i)}this.perimeterLength=this._length>0?new n(t.normalizeDistance(this._updatePerimeterLengths()),"meters"):null,h.midpoint(_,this.areaCentroidRenderCoords),l.vectorToVector(this.areaCentroidRenderCoords,i,this.areaCentroidWorldCoords,s),l.transformDirection(this.areaCentroidWorldCoords,this._frame[2],s,this.areaNormalRenderCoords,i),this._updateIntersectingSegments(),this.area=0===this.intersectingSegments.size?new n(t.normalizeArea(this._computeArea()),"square-meters"):null},e.prototype._updateGeodesicArea=function(e,t){var i=e.renderCoordsHelper,s=this.positionsSpherical,r=this.positionsStereographic,h=this._tempVec3,c=o.fitHemisphere(s,h);if(!c)return void(this.geodesicArea=null);var g=this._tempU,m=this._tempV;p.tangentFrame(h,g,m);for(var u=0;u<this._length;++u){var _=a.vec3d.dot(s[u],g),v=a.vec3d.dot(s[u],m),f=a.vec3d.dot(s[u],h);a.vec2d.set2(_/f,v/f,r[u])}a.vec3d.scale(h,d.earthRadius),i.toRenderCoords(h,l.SphericalECEFSpatialReference,this.geodesicAreaCentroidRenderCoords),i.worldUpAtPosition(this.geodesicAreaCentroidRenderCoords,this.geodesicAreaNormalRenderCoords),this._updateGeodesicIntersectingSegments(),this.geodesicArea=c&&0===this.geodesicIntersectingSegments.size?new n(this._computeGeodesicArea(),"square-meters"):null},e.prototype._updatePerimeterLengths=function(){for(var e=this.positionsProjectedWorldCoords,t=this.perimeterSegmentLengths,i=0,s=0;s<this._length;++s){i+=t[s]=a.vec2d.dist(e[s],e[(s+1)%this._length])}return i},e.prototype._updateIntersectingSegments=function(){var e=this.positionsProjectedWorldCoords,t=this.intersectingSegments;t.clear();for(var i=0;i<this._length;++i)for(var s=i+2;s<this._length;++s)if((s+1)%this._length!==i){var o=e[i],n=e[(i+1)%this._length],h=e[s],a=e[(s+1)%this._length];r.segmentIntersects(o,n,h,a)&&(t.add(i),t.add(s))}},e.prototype._computeArea=function(){for(var e=this.positionsProjectedWorldCoords,t=m(e,2,2),s=this.triangleIndices=new Uint32Array(i(t,[],2)),r=0,n=0;n<s.length;n+=3)r+=o.triangleAreaEuclidean(e[s[n]],e[s[n+1]],e[s[n+2]]);return r},e.prototype._updateGeodesicIntersectingSegments=function(){var e=this.positionsStereographic,t=this.geodesicIntersectingSegments;t.clear();for(var i=0;i<this._length;++i)for(var s=i+2;s<this._length;++s)if((s+1)%this._length!==i){var o=e[i],n=e[(i+1)%this._length],h=e[s],a=e[(s+1)%this._length];r.segmentIntersects(o,n,h,a)&&(t.add(i),t.add(s))}},e.prototype._computeGeodesicArea=function(){for(var e=this.positionsGeographic,t=this.positionsStereographic,r=m(t,2,2),n=this.geodesicTriangleIndices=new Uint32Array(i(r,[],2)),h=0,a=0;a<n.length;a+=3)h+=o.triangleAreaGeodesic(e[n[a]],e[n[a+1]],e[n[a+2]],s.WGS84);return h},e.prototype._selectFittingMode=function(e,t,i,s){var r=t.map(function(t){return Math.abs(o.planePointDistance(e,t))}).reduce(function(e,t){return Math.max(e,t)},0);o.boundingSphere(t,this._tempSphere);var n=2*this._tempSphere.radius,h=r/n,d=h<s.maxRelativeErrorCoplanar,p=h<s.maxRelativeErrorAlmostCoplanar,l="horizontal";if(d)l="oblique";else if(p){var g=Math.abs(a.vec3d.dot(i,e))>Math.cos(c.deg2rad(s.verticalAngleThreshold));l=g?"horizontal":"vertical"}return l},e}()});